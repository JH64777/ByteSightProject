"""
Django settings for bytesight project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import environ
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent # BASE_DIR == project 폴더까지의 경로

# .env파일을 사용하기 위한 코드
env = environ.Env(DEBUG=(bool, False))
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

STATICFILES_DIRS = [ # 정적 파일들을 가져오는 경로 명시
     os.path.join(BASE_DIR, 'static'),
]

# 사진 업로드를 위한 셋팅
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True # 개발용으로 실행하게끔 (로그를 계속 남기게 하고 실제 배포때는 False로 두는 것이 맞음)
# DEBUG = False # 배포할 때 False로 해둠, False로 할 시 error 404를 자동으로 처리해줌

ALLOWED_HOSTS = ['localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    # local app
    'home',
    'account',
    'board',
    'login',
    'scenario',
    'staganalysis',

    # django app
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            # templates의 경로 지정
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = { # mysql 연결
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': env('DBNAME'),
        'USER' : env('USER'),
        'PASSWORD' : env('PASSWORD'),
        'HOST' : env('HOST'),
        'PORT' : env('PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/' # URL상으로 이미지를 불러올 때 사용하는 경로
# ex> http://localhost:8000/static/이미지.jpg 이것으로 검색할 시 해당 이미지가 화면에 나옴

STATIC_ROOT = os.path.join(BASE_DIR, 'DistributionStaticFiles') # 배포를 할때 사용할 모든 정적파일을 해당 경로로 모으는 것 (STATIC_ROOT, python manage.py collectstatic 실행하면 해당 경로로 모든 정적 파일이 모아짐)
# django는 배포용으로 동작할 시 스스로 정적파일을 클라이언트에게 서빙할 수 없게 설계되었다(불필요한 동작을 없애고 보안적인 면에서도 강화하기 위해 그랬다 함)
# 그래서 NGINX나 Apache등의 웹 서버와 같이 사용해야 한다고 한다.
# 맨 위에 있는 DEBUG 변수의 값을 True로 바꾸면 정적파일을 볼 수 있다.


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
